version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: lbsiot-backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=lbsiot
      - DB_USER=lbsiot_user
      - DB_PASSWORD=lbsiot_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=lbsiot
      - RABBITMQ_PASS=lbsiot_password
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
    depends_on:
      - postgres
      - redis
      - rabbitmq
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - lbsiot-network
    restart: unless-stopped

  # Frontend Web Application
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    container_name: lbsiot-frontend
    ports:
      - "80:80"
      - "443:443"
    environment:
      - REACT_APP_API_URL=http://backend:3000
      - REACT_APP_GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
    depends_on:
      - backend
    networks:
      - lbsiot-network
    restart: unless-stopped

  # Management Platform
  management:
    build:
      context: ./src/management
      dockerfile: Dockerfile
    container_name: lbsiot-management
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=lbsiot
      - DB_USER=lbsiot_user
      - DB_PASSWORD=lbsiot_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
    networks:
      - lbsiot-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lbsiot-postgres
    environment:
      - POSTGRES_DB=lbsiot
      - POSTGRES_USER=lbsiot_user
      - POSTGRES_PASSWORD=lbsiot_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - lbsiot-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lbsiot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lbsiot-network
    restart: unless-stopped

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: lbsiot-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=lbsiot
      - RABBITMQ_DEFAULT_PASS=lbsiot_password
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - lbsiot-network
    restart: unless-stopped

  # IoT Data Processor
  iot-processor:
    build:
      context: ./src/iot
      dockerfile: Dockerfile
    container_name: lbsiot-iot-processor
    environment:
      - NODE_ENV=production
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=lbsiot
      - RABBITMQ_PASS=lbsiot_password
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=lbsiot
      - DB_USER=lbsiot_user
      - DB_PASSWORD=lbsiot_password
    depends_on:
      - rabbitmq
      - postgres
    volumes:
      - ./logs:/app/logs
    networks:
      - lbsiot-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: lbsiot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - management
    networks:
      - lbsiot-network
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: lbsiot-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - lbsiot-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: lbsiot-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - lbsiot-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  lbsiot-network:
    driver: bridge 